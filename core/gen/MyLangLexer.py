# Generated from core/MyLang.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,13,107,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,1,
        0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,5,5,40,8,5,10,5,12,
        5,43,9,5,1,6,1,6,1,6,1,6,5,6,49,8,6,10,6,12,6,52,9,6,1,6,1,6,1,7,
        3,7,57,8,7,1,7,4,7,60,8,7,11,7,12,7,61,1,8,1,8,4,8,66,8,8,11,8,12,
        8,67,3,8,70,8,8,1,8,1,8,5,8,74,8,8,10,8,12,8,77,9,8,1,9,1,9,1,9,
        1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,93,8,10,
        1,11,1,11,1,11,1,11,1,12,1,12,5,12,101,8,12,10,12,12,12,104,9,12,
        1,12,1,12,0,0,13,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
        11,23,12,25,13,1,0,6,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,
        97,122,3,0,10,10,13,13,34,34,1,0,48,57,3,0,9,10,13,13,32,32,2,0,
        10,10,13,13,116,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,
        0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,
        0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,1,27,1,0,0,0,
        3,29,1,0,0,0,5,31,1,0,0,0,7,33,1,0,0,0,9,35,1,0,0,0,11,37,1,0,0,
        0,13,44,1,0,0,0,15,56,1,0,0,0,17,69,1,0,0,0,19,78,1,0,0,0,21,92,
        1,0,0,0,23,94,1,0,0,0,25,98,1,0,0,0,27,28,5,40,0,0,28,2,1,0,0,0,
        29,30,5,41,0,0,30,4,1,0,0,0,31,32,5,59,0,0,32,6,1,0,0,0,33,34,5,
        46,0,0,34,8,1,0,0,0,35,36,5,44,0,0,36,10,1,0,0,0,37,41,7,0,0,0,38,
        40,7,1,0,0,39,38,1,0,0,0,40,43,1,0,0,0,41,39,1,0,0,0,41,42,1,0,0,
        0,42,12,1,0,0,0,43,41,1,0,0,0,44,50,5,34,0,0,45,49,8,2,0,0,46,47,
        5,34,0,0,47,49,5,34,0,0,48,45,1,0,0,0,48,46,1,0,0,0,49,52,1,0,0,
        0,50,48,1,0,0,0,50,51,1,0,0,0,51,53,1,0,0,0,52,50,1,0,0,0,53,54,
        5,34,0,0,54,14,1,0,0,0,55,57,5,45,0,0,56,55,1,0,0,0,56,57,1,0,0,
        0,57,59,1,0,0,0,58,60,7,3,0,0,59,58,1,0,0,0,60,61,1,0,0,0,61,59,
        1,0,0,0,61,62,1,0,0,0,62,16,1,0,0,0,63,65,5,45,0,0,64,66,7,3,0,0,
        65,64,1,0,0,0,66,67,1,0,0,0,67,65,1,0,0,0,67,68,1,0,0,0,68,70,1,
        0,0,0,69,63,1,0,0,0,69,70,1,0,0,0,70,71,1,0,0,0,71,75,3,7,3,0,72,
        74,7,3,0,0,73,72,1,0,0,0,74,77,1,0,0,0,75,73,1,0,0,0,75,76,1,0,0,
        0,76,18,1,0,0,0,77,75,1,0,0,0,78,79,5,110,0,0,79,80,5,117,0,0,80,
        81,5,108,0,0,81,82,5,108,0,0,82,20,1,0,0,0,83,84,5,116,0,0,84,85,
        5,114,0,0,85,86,5,117,0,0,86,93,5,101,0,0,87,88,5,102,0,0,88,89,
        5,97,0,0,89,90,5,108,0,0,90,91,5,115,0,0,91,93,5,101,0,0,92,83,1,
        0,0,0,92,87,1,0,0,0,93,22,1,0,0,0,94,95,7,4,0,0,95,96,1,0,0,0,96,
        97,6,11,0,0,97,24,1,0,0,0,98,102,5,35,0,0,99,101,8,5,0,0,100,99,
        1,0,0,0,101,104,1,0,0,0,102,100,1,0,0,0,102,103,1,0,0,0,103,105,
        1,0,0,0,104,102,1,0,0,0,105,106,6,12,0,0,106,26,1,0,0,0,11,0,41,
        48,50,56,61,67,69,75,92,102,1,6,0,0
    ]

class MyLangLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    LPAREN = 1
    RPAREN = 2
    SEMI = 3
    DOT = 4
    COMMA = 5
    ID = 6
    STRING = 7
    INT = 8
    FLOAT = 9
    NULL = 10
    BOOL = 11
    WHITESPACE = 12
    COMMENT = 13

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "';'", "'.'", "','", "'null'" ]

    symbolicNames = [ "<INVALID>",
            "LPAREN", "RPAREN", "SEMI", "DOT", "COMMA", "ID", "STRING", 
            "INT", "FLOAT", "NULL", "BOOL", "WHITESPACE", "COMMENT" ]

    ruleNames = [ "LPAREN", "RPAREN", "SEMI", "DOT", "COMMA", "ID", "STRING", 
                  "INT", "FLOAT", "NULL", "BOOL", "WHITESPACE", "COMMENT" ]

    grammarFileName = "MyLang.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


